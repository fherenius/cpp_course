
1) define an int-type parameter?

It is appropriate to use an int-type parameter when passing by value. The
parameter is then limited to the functions scope. In the code example this
is illustrated because the parameter x is limited to the functions scope
and its value is only accessible by returning it.

int addOne(int x)
{
    return ++x;
}

2) define a std::string value parameter?


It is appropriate to use an string value parameter when passing by value.
the entire string is copied so only use this when a copy is required. In
the code example this is illustrated because a copy of s1 is made and 
modified, add the end of main two strings exist.

string addDot(string s)
{
    return s.append(".");
}

int main()
{
    string s1 = "This is a string";

    string s2 = addDot(s1);
}

3) define a const reference to an int-type parameter?

It is not appropriate to use a const reference to an int-type parameter. Rather
pass by value. Value parameters are more efficiently handled.

4) define a const reference to a std::string value parameter?

It is appropriate to use an int-type parameter when you do not need to modify
the string. In the code example this is illustrated because the contents
of s are not modified.

void print(string const &s)
{
    cout << s;
}

5) define a non-const reference to an int-type parameter?

It is appropriate to use an int-type parameter when ... (your description here). In the code example this is illustrated because ... (your explanation here)

6) define a non-const reference to a std::string value parameter?

It is appropriate to use an int-type parameter when ... (your description here). In the code example this is illustrated because ... (your explanation here)

7) define a const rvalue-reference to an int-type parameter?

It is appropriate to use an int-type parameter when ... (your description here). In the code example this is illustrated because ... (your explanation here)

8) define a const rvalue-reference to a std::string parameter?

It is appropriate to use an int-type parameter when ... (your description here). In the code example this is illustrated because ... (your explanation here)

9) define an rvalue-reference to an int-type parameter?

It is appropriate to use an int-type parameter when ... (your description here). In the code example this is illustrated because ... (your explanation here)

10) define an rvalue-reference to a std::string parameter?

It is appropriate to use an int-type parameter when ... (your description here). In the code example this is illustrated because ... (your explanation here)

11) return an int-type value?

It is appropriate to use an int-type parameter when ... (your description here). In the code example this is illustrated because ... (your explanation here)

12) return a std::string value?

It is appropriate to use an int-type parameter when ... (your description here). In the code example this is illustrated because ... (your explanation here)

13) return a const reference to an int?

It is appropriate to use an int-type parameter when ... (your description here). In the code example this is illustrated because ... (your explanation here)

14) return a const reference to a std::string?

It is appropriate to use an int-type parameter when ... (your description here). In the code example this is illustrated because ... (your explanation here)

15) return a non-const reference to an int?

It is appropriate to use an int-type parameter when ... (your description here). In the code example this is illustrated because ... (your explanation here)

16) return a non-const reference to a std::string?

It is appropriate to use an int-type parameter when ... (your description here). In the code example this is illustrated because ... (your explanation here)

17) return a const rvalue-reference to an int?

It is appropriate to use an int-type parameter when ... (your description here). In the code example this is illustrated because ... (your explanation here)

18) return a const rvalue-reference to a std::string?

It is appropriate to use an int-type parameter when ... (your description here). In the code example this is illustrated because ... (your explanation here)

19) return an rvalue-reference to an int?
20) return an rvalue-reference to a std::string?

It is appropriate to use an int-type parameter when ... (your description here). In the code example this is illustrated because ... (your explanation here)
